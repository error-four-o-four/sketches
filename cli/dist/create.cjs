#!/usr/bin/env node
"use strict";const a=require("node:path"),g=require("node:fs"),m=require("node:util"),r=require("./index-BR1ysLzg.cjs"),c={sketches:"sketches",templates:"templates"};(async()=>{const s={name:{type:"string",short:"n"},tmpl:{type:"string",short:"t"},source:{type:"string"},src:{type:"string",short:"s"}},e=m.parseArgs({args:process.argv.slice(2),options:s,strict:!1,allowPositionals:!0}),o=d(e),n=e.values.src??e.values.source,t=n?v(n):f(e);await h(t,o),y(o),console.log("âœ… Done")})();function d({values:s,positionals:e}){const o=e[0]===process.argv[2]?e[0]:s.name;if(o||(console.log("Please submit a name to create a new project"),console.log("e.g. 'npx create foo', 'npx create --name foo' or 'npx create --name=foo'"),process.exit(1)),s.name&&e[0]===process.argv[2]&&console.log("Too much arguments were passed. Using %o",o),typeof o=="string"){const t=r.rx.targetFolder.test(o)?o:`${new Date().toISOString().split("T")[0]}-${o}`;if(!r.getFolders(c.sketches).includes(t))return a.resolve("./",c.sketches,t);console.log("project %o already exists",t),process.exit(1)}const n=["--name","-n"].find(t=>process.argv.includes(t))??"name";console.log("Invalid value for argument %o",n),process.exit(1)}function f({values:s}){const e=s.tmpl;if(!e)return a.resolve("./",c.templates,"instance");const o=r.getFolders(c.templates);if(typeof e=="string"){if(o.includes(e))return a.resolve("./",c.templates,e);console.log("Could not determine template project %o",e),console.log(p(o),...o),process.exit(1)}const n=["--tmpl","-t"].find(t=>process.argv.includes(t));console.log("Invalid value for argument %o",n),console.log(p(o),...o),process.exit(1)}function v(s){const e=r.getFolders(c.sketches);if(typeof s=="string"){if(e.includes(s))return a.resolve("./",c.sketches,s);console.log("Could not determine source project %o",s),console.log(p(e),...e),process.exit(1)}const o=["--source","--src","-s"].find(n=>process.argv.includes(n));console.log("Invalid value for argument %o",o),console.log(p(e),...e),process.exit(1)}function p(s){return`Use one of these ${Array.from({length:s.length},()=>"%o").join(", ")}`}async function h(s,e){console.log("Creating new sketch in %o",e);try{g.mkdirSync(e);let o,n;const t=g.readdirSync(s).filter(l=>typeof l=="string").filter(l=>!/^node_module|^dist|^\.vite/.test(l)).map(l=>(o=a.resolve(s,l),n=a.resolve(e,l),g.promises.cp(o,n,{recursive:!0})));await Promise.all(t)}catch(o){r.logError(o),process.exit(1)}}function y(s){const e=a.join(s,"package.json"),o=r.parseJson(e),n=k();let t=a.basename(s).replace(r.rx.isoDate,"").slice(1);if(n.includes(t)){let u=1,i=`${t}${u}`;for(;n.includes(i);)u+=1,i=`${t}${u}`;console.warn("Project name %o is already used. Renaming Project to %o",t,i),console.warn("Consider to rename the project manually"),t=i}const l=Object.assign(o,{name:t});r.writeJson(e,l)}function k(){return r.getFolders(c.sketches).map(s=>a.resolve("./",c.sketches,s,"package.json")).filter(s=>g.existsSync(s)).map(s=>r.parseJson(s).name)}
