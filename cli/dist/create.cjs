#!/usr/bin/env node
"use strict";const r=require("node:path"),l=require("node:fs"),y=require("node:util"),f={isoDate:/^\d{4}-\d{1,2}-\d{1,2}/,targetFolder:/^\d{4}-\d{1,2}-\d{1,2}-\w+/};function d(o){o instanceof Error&&console.log(o.message)}function m(o){try{const e=l.readFileSync(o,"utf-8");return JSON.parse(e)}catch(e){d(e)}return null}function h(o,e){l.writeFileSync(o,JSON.stringify(e,null,2))}const c={sketches:"sketches",templates:"templates"};(async()=>{const o={name:{type:"string",short:"n"},tmpl:{type:"string",short:"t"},source:{type:"string"},src:{type:"string",short:"s"}},e=y.parseArgs({args:process.argv.slice(2),options:o,strict:!1,allowPositionals:!0}),s=v(e),n=e.values.src??e.values.source,t=n?w(n):k(e);await x(t,s),j(s)})();function v({values:o,positionals:e}){const s=e[0]===process.argv[2]?e[0]:o.name;if(s||(console.log("Please submit a name to create a new project"),console.log("e.g. 'npx create foo', 'npx create --name foo' or 'npx create --name=foo'"),process.exit(1)),o.name&&e[0]===process.argv[2]&&console.log("Too much arguments were passed. Using %o",s),typeof s=="string"){const t=f.targetFolder.test(s)?s:`${new Date().toISOString().split("T")[0]}-${s}`;if(!u(c.sketches).includes(t))return r.resolve("./",c.sketches,t);console.log("project %o already exists",t),process.exit(1)}const n=["--name","-n"].find(t=>process.argv.includes(t))??"name";console.log("Invalid value for argument %o",n),process.exit(1)}function k({values:o}){const e=o.tmpl;if(!e)return r.resolve("./",c.templates,"instance");const s=u(c.templates);if(typeof e=="string"){if(s.includes(e))return r.resolve("./",c.templates,e);console.log("Could not determine template project %o",e),console.log(g(s),...s),process.exit(1)}const n=["--tmpl","-t"].find(t=>process.argv.includes(t));console.log("Invalid value for argument %o",n),console.log(g(s),...s),process.exit(1)}function w(o){const e=u(c.sketches);if(typeof o=="string"){if(e.includes(o))return r.resolve("./",c.sketches,o);console.log("Could not determine source project %o",o),console.log(g(e),...e),process.exit(1)}const s=["--source","--src","-s"].find(n=>process.argv.includes(n));console.log("Invalid value for argument %o",s),console.log(g(e),...e),process.exit(1)}function u(o){try{return l.readdirSync(r.resolve(o),{withFileTypes:!0}).filter(e=>e.isDirectory()).map(e=>e.name)}catch(e){d(e)}return[]}function g(o){return`Use one of these ${Array.from({length:o.length},()=>"%o").join(", ")}`}async function x(o,e){console.log("Creating new sketch in %o",e);try{l.mkdirSync(e);let s,n;const t=l.readdirSync(o).filter(a=>typeof a=="string").filter(a=>!/^node_module|^dist|^\.vite/.test(a)).map(a=>(s=r.resolve(o,a),n=r.resolve(e,a),l.promises.cp(s,n,{recursive:!0})));await Promise.all(t),console.log("✅ Done")}catch(s){d(s),console.log("❌ Failed"),process.exit(1)}}function j(o){const e=r.join(o,"package.json"),s=m(e),n=S();let t=r.basename(o).replace(f.isoDate,"").slice(1);if(n.includes(t)){let p=1,i=`${t}${p}`;for(;n.includes(i);)p+=1,i=`${t}${p}`;console.warn("Project name %o is already used. Renaming Project to %o",t,i),console.warn("Consider to rename the project manually"),t=i}const a=Object.assign(s,{name:t});h(e,a)}function S(){return u(c.sketches).map(o=>r.resolve("./",c.sketches,o,"package.json")).filter(o=>l.existsSync(o)).map(o=>m(o).name)}
