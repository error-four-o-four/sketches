#!/usr/bin/env node
"use strict";var m=Object.defineProperty;var a=(t,e)=>m(t,"name",{value:e,configurable:!0});var i=require("node:path"),u=require("node:fs"),h=require("node:util"),g=require("@internal/utils");const p={sketches:"sketches",templates:"templates"};(async()=>{const t={name:{type:"string",short:"n"},tmpl:{type:"string",short:"t"},source:{type:"string"},src:{type:"string",short:"s"}},e=h.parseArgs({args:process.argv.slice(2),options:t,strict:!1,allowPositionals:!0}),{name:o,date:s,target:r}=v(e),n=e.values.src??e.values.source,c=n?x(n):y(e);await k(c,r),w(r,o),S(r,o,s),console.log("\u2705 Done")})();function v({values:t,positionals:e}){const o=e[0]===process.argv[2]?e[0]:t.name;if(o||(console.log("Please provide a name to create a new project"),console.log("e.g. %o, %o or %o","npx create foo","npx create --name foo","npx create --name=foo"),process.exit(1)),t.name&&e[0]===process.argv[2]&&console.log("Too much arguments were passed. Using %o",o),typeof o=="string"){const r=o.match(g.rxIsoDate);let n,c,l;if(r?(c=r[0],n=o.replace(c,"").slice(1),l=o):(c=new Date().toISOString().split("T")[0],n=o,l=`${c}-${n}`),!f(p.sketches).includes(l))return{name:n,date:c,target:i.resolve("./",p.sketches,l)};console.log("project %o already exists",l),process.exit(1)}const s=["--name","-n"].find(r=>process.argv.includes(r))??"name";console.log("Invalid value for argument %o",s),process.exit(1)}a(v,"getTargetPath");function y({values:t}){const e=t.tmpl;if(!e)return i.resolve("./",p.templates,"instance");const o=f(p.templates);if(typeof e=="string"){if(o.includes(e))return i.resolve("./",p.templates,e);console.log("Could not determine template project %o",e),console.log(d(o),...o),process.exit(1)}const s=["--tmpl","-t"].find(r=>process.argv.includes(r));console.log("Invalid value for argument %o",s),console.log(d(o),...o),process.exit(1)}a(y,"getTemplatePath");function x(t){const e=f(p.sketches);if(typeof t=="string"){if(e.includes(t))return i.resolve("./",p.sketches,t);console.log("Could not determine source project %o",t),console.log(d(e),...e),process.exit(1)}const o=["--source","--src","-s"].find(s=>process.argv.includes(s));console.log("Invalid value for argument %o",o),console.log(d(e),...e),process.exit(1)}a(x,"getSourcePath");function d(t){return`Use one of these ${Array.from({length:t.length},()=>"%o").join(", ")}`}a(d,"getFoldersMessage");async function k(t,e){console.log("Creating new sketch in %o",e);try{u.mkdirSync(e);let o,s;const r=u.readdirSync(t).filter(n=>typeof n=="string").filter(n=>!/^node_module|^dist|^\.vite/.test(n)).map(n=>(o=i.resolve(t,n),s=i.resolve(e,n),u.promises.cp(o,s,{recursive:!0})));await Promise.all(r)}catch(o){g.logError(o),process.exit(1)}}a(k,"copySourceFiles");function w(t,e){const o=j(),s=i.join(t,"package.json"),r=g.parseJson(s);if(o.includes(e)){let c=1,l=`${e}${c}`;for(;o.includes(l);)c+=1,l=`${e}${c}`;console.warn("Project name %o is already in use. Renaming Project to %o",e,l),console.warn("Consider to rename the project manually"),e=l}const n=Object.assign(r,{name:e});g.writeJson(s,n)}a(w,"updatePackageJson");function j(){return f(p.sketches).map(t=>i.resolve("./",p.sketches,t,"package.json")).filter(t=>u.existsSync(t)).map(t=>g.parseJson(t).name)}a(j,"getPackageNames");function S(t,e,o){const s=i.join(t,"index.html");let r=u.existsSync(s)?u.readFileSync(s,"utf-8"):null;r||(console.warn("Could not read %o",s),process.exit(1)),r=r.replace(/<title>.*<\/title>/,`<title>${e} - ${o}</title>`),u.writeFileSync(s,r)}a(S,"updateIndexHtml");function f(t,e){const o={recursive:!1,withFileTypes:!0,...e};try{return u.readdirSync(i.resolve(t),o).filter(s=>s.isDirectory()).map(s=>s.name)}catch(s){g.logError(s)}return[]}a(f,"getFolders");
