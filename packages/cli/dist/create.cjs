#!/usr/bin/env node
"use strict";var v=Object.defineProperty;var l=(e,t)=>v(e,"name",{value:t,configurable:!0});var i=require("node:path"),u=require("node:fs"),m=require("node:fs/promises"),h=require("node:child_process"),y=require("node:util"),g=require("@internal/utils");const p={sketches:"sketches",templates:"templates"};(async()=>{const e={name:{type:"string",short:"n"},tmpl:{type:"string",short:"t"},source:{type:"string"},src:{type:"string",short:"s"}},t=y.parseArgs({args:process.argv.slice(2),options:e,strict:!1,allowPositionals:!0}),{folder:s,name:o,date:n,path:r}=x(t),a=t.values.src??t.values.source,c=a?k(a):w(t);await S(c,r),await j(r,o),P(r,o,n),console.log("Done \u2713")})();function x({values:e,positionals:t}){const s=t[0]===process.argv[2]?t[0]:e.name;if(s||(console.log("Please provide a name to create a new project"),console.log("e.g. %o, %o or %o","npx create foo","npx create --name foo","npx create --name=foo"),process.exit(1)),e.name&&t[0]===process.argv[2]&&console.log("Too much arguments were passed. Using %o",s),typeof s=="string"){const n=s.match(g.rxIsoDate);let r,a,c;if(n?(a=n[0],r=s.replace(a,"").slice(1),c=s):(a=new Date().toISOString().split("T")[0],r=s,c=`${a}-${r}`),F().includes(r)&&(console.log("Package %o already exists",r),process.exit(1)),!d(p.sketches).includes(c))return{folder:c,name:r,date:a,path:i.resolve("./",p.sketches,c)};console.log("Folder %o already exists",c),process.exit(1)}const o=["--name","-n"].find(n=>process.argv.includes(n))??"name";console.log("Invalid value for argument %o",o),process.exit(1)}l(x,"getSketchData");function w({values:e}){const t=e.tmpl;if(!t)return i.resolve("./",p.templates,"instance");const s=d(p.templates);if(typeof t=="string"){if(s.includes(t))return i.resolve("./",p.templates,t);console.log("Could not determine template project %o",t),console.log(f(s),...s),process.exit(1)}const o=["--tmpl","-t"].find(n=>process.argv.includes(n));console.log("Invalid value for argument %o",o),console.log(f(s),...s),process.exit(1)}l(w,"getTemplatePath");function k(e){const t=d(p.sketches);if(typeof e=="string"){if(t.includes(e))return i.resolve("./",p.sketches,e);console.log("Could not determine source project %o",e),console.log(f(t),...t),process.exit(1)}const s=["--source","--src","-s"].find(o=>process.argv.includes(o));console.log("Invalid value for argument %o",s),console.log(f(t),...t),process.exit(1)}l(k,"getSourcePath");function f(e){return`Use one of these ${Array.from({length:e.length},()=>"%o").join(", ")}`}l(f,"getFoldersMessage");async function S(e,t){console.log("Creating new sketch in %o",t);try{u.mkdirSync(t);let s,o;const n=u.readdirSync(e).filter(r=>typeof r=="string").filter(r=>!/^node_module|^dist|^\.vite/.test(r)).map(r=>(s=i.resolve(e,r),o=i.resolve(t,r),m.cp(s,o,{recursive:!0})));await Promise.all(n)}catch(s){g.logError(s),process.exit(1)}}l(S,"copySourceFiles");async function j(e,t){const s=i.join(e,"package.json"),o=g.parseJson(s),n=Object.assign(o,{name:t});g.writeJson(s,n),await new Promise((r,a)=>{h.exec(`npm i -w ${e}`,c=>{c&&a(c.message),r()})}).catch(async r=>{await m.rm(e,{recursive:!0}),console.warn(r),process.exit(1)})}l(j,"updatePackageJson");function F(){return d(p.sketches).map(e=>i.resolve("./",p.sketches,e,"package.json")).filter(e=>u.existsSync(e)).map(e=>g.parseJson(e).name).filter(e=>typeof e=="string")}l(F,"getPackageNames");function P(e,t,s){const o=i.join(e,"index.html");let n=u.existsSync(o)?u.readFileSync(o,"utf-8"):null;n||(console.warn("Could not read %o",o),process.exit(1)),n=n.replace(/<title>.*<\/title>/,`<title>${t} - ${s}</title>`),u.writeFileSync(o,n)}l(P,"updateIndexHtml");function d(e,t){const s={recursive:!1,withFileTypes:!0,...t};try{return u.readdirSync(i.resolve(e),s).filter(o=>o.isDirectory()).map(o=>o.name)}catch(o){g.logError(o)}return[]}l(d,"getFolders");
